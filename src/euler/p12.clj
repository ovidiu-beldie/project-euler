;The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;Let us list the factors of the first seven triangle numbers:
;     1: 1
;     3: 1,3
;     6: 1,2,3,6
;    10: 1,2,5,10
;    15: 1,3,5,15
;    21: 1,3,7,21
;    28: 1,2,4,7,14,28
;We can see that 28 is the first triangle number to have over five divisors.
;What is the value of the first triangle number to have over five hundred divisors?

(ns euler.p12
  (:use [clojure.contrib.combinatorics :only (combinations)]
        [euler.p3 :only (factorize)]))

(defn triangle-numbers []
  "Generate infinite seq of triangle numbers"
  (map first (iterate (fn [[n i]] [(+ n (inc i)) (inc i)]) [1 1])))

(defn filter-uniques [coll]
  "Filter unique values (remove doubles)"
  (loop [filtered-c (list), c coll]
    (if (nil? (first c))
      filtered-c
      (let [new-c
                  (if (apply distinct? (first c) filtered-c)
                    (conj filtered-c (first c))
                    filtered-c)]
        (recur new-c, (rest c))))))

(defn divisors [n]
  "Return the list of divisors of n"
  (let [factors (factorize n)
        k-seq (range 1 (inc (count factors)))
        divisors-raw (map #(combinations factors %) k-seq)
        divs (loop [divs (list), d-raw divisors-raw]
                (if (nil? (first d-raw))
                  divs
                  (recur (apply conj divs (first d-raw)), (rest d-raw))))]
    (filter-uniques divs)))
    

(defn p12 []
  (first (drop-while #(> 500 (inc (count (divisors %)))) (drop 1 (triangle-numbers)))))
